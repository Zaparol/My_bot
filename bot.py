import json
import os
import asyncio
import logging
from ta.trend import ADXIndicator, SMAIndicator, EMAIndicator, MACD
from ta.volatility import BollingerBands, AverageTrueRange
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volume import OnBalanceVolumeIndicator, MFIIndicator
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from datetime import datetime, timedelta, timezone
from binance import Client
from binance.exceptions import BinanceAPIException
import pandas as pd

# ======================= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =======================

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram API —Ç–æ–∫–µ–Ω
API_TOKEN = '7564004976:AAF2YlriNyPWFh964GYoy__Wepcp-2RZNDI'

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ Binance API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
BINANCE_API_KEY = 'YOUR_BINANCE_API_KEY'
BINANCE_API_SECRET = 'YOUR_BINANCE_API_SECRET'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: DEBUG, INFO, WARNING, ERROR, CRITICAL
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)
logging.getLogger("binance").setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CRYPTO_SYMBOLS = ['BTCUSDT', 'TONUSDT', 'PEPEUSDT', 'SOLUSDT', 'NEARUSDT', 'ETHUSDT', 'DOGEUSDT']
SUBSCRIBERS_FILE = 'subscribers.json'
DATA_DIR = 'historical_data'  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –º—É–ª—å—Ç–∏–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
TIMEFRAMES = ['15m', '30m', '1h', '1d']  # 5 –º–∏–Ω—É—Ç, 15 –º–∏–Ω—É—Ç, 1 —á–∞—Å –∏ 1 –¥–µ–Ω—å

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
market_trends = {}

# ======================= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance Client =======================

try:
    client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
    client.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Binance API.")
except BinanceAPIException as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API: {e}")
    exit(1)
except Exception as e:
    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Binance API: {e}")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)
    logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {DATA_DIR}")

# ======================= –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ =======================

def load_subscribers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump([], f)
        logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {SUBSCRIBERS_FILE} –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return set()

    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            data = f.read().strip()
            if not data:
                logger.info(f"üìÑ –§–∞–π–ª {SUBSCRIBERS_FILE} –ø—É—Å—Ç.")
                return set()
            subscribers = set(json.loads(data))
            logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
            return subscribers
    except json.JSONDecodeError:
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ {SUBSCRIBERS_FILE}. –°–±—Ä–æ—Å —Ñ–∞–π–ª–∞.")
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump([], f)
        return set()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return set()

def save_subscribers(subscribers):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª."""
    try:
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(list(subscribers), f)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

# ======================= –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö =======================

def get_historical_data_file(symbol, timeframe):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞."""
    return os.path.join(DATA_DIR, f"{symbol}_{timeframe}_historical_data.csv")

def load_historical_data(symbol, timeframe):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ Binance API."""
    HISTORICAL_DATA_FILE = get_historical_data_file(symbol, timeframe)
    if not os.path.exists(HISTORICAL_DATA_FILE):
        logger.info(f"üìä –§–∞–π–ª {HISTORICAL_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ —Å Binance –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}...")
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            if timeframe == '1d':
                days = 500
            elif timeframe == '1h':
                days = 200
            elif timeframe == '30m':
                days = 200
            elif timeframe == '15m':
                days = 200
            else:
                days = 200  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π

            start_time = int((datetime.now(timezone.utc) - timedelta(days=days)).timestamp() * 1000)
            klines = client.get_historical_klines(
                symbol,
                timeframe,
                start_str=start_time,
                limit=1000
            )
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π UTC
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True)
            df.set_index('timestamp', inplace=True)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            df.to_csv(HISTORICAL_DATA_FILE)
            logger.info(f"üìÅ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {HISTORICAL_DATA_FILE}.")
            return df
        except BinanceAPIException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Binance API –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {e}")
            return pd.DataFrame()
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {e}")
            return pd.DataFrame()
    else:
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {HISTORICAL_DATA_FILE} –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}...")
        try:
            df = pd.read_csv(
                HISTORICAL_DATA_FILE,
                index_col='timestamp',
                parse_dates=True
            )
            logger.info(f"üìÅ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {HISTORICAL_DATA_FILE}.")
            return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {e}")
            return pd.DataFrame()

def update_historical_data(df, symbol, timeframe):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–∞—è –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å Binance API."""
    HISTORICAL_DATA_FILE = get_historical_data_file(symbol, timeframe)
    if df.empty:
        logger.info(f"üìâ DataFrame –ø—É—Å—Ç –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}. –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.")
        return load_historical_data(symbol, timeframe)
    
    last_timestamp = df.index[-1]
    now = datetime.now(timezone.utc)
    delta = now - last_timestamp
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    if timeframe.endswith('m'):
        interval_minutes = int(timeframe.replace('m', ''))
        interval_delta = timedelta(minutes=interval_minutes)
    elif timeframe.endswith('h'):
        interval_hours = int(timeframe.replace('h', ''))
        interval_delta = timedelta(hours=interval_hours)
    elif timeframe.endswith('d'):
        interval_days = int(timeframe.replace('d', ''))
        interval_delta = timedelta(days=interval_days)
    else:
        interval_delta = timedelta(minutes=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏
    logger.info(f"üìà –û–±–Ω–æ–≤–ª—è—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}...")
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º last_timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        start_time = int(last_timestamp.timestamp() * 1000) + 1  # –î–æ–±–∞–≤–ª—è–µ–º 1 –º—Å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
        klines = client.get_historical_klines(
            symbol,
            timeframe,
            start_str=start_time,
            limit=1000
        )
        if not klines:
            logger.info(f"üîÑ –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.")
            return df
        new_df = pd.DataFrame(klines, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
        ])
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π UTC
        new_df['timestamp'] = pd.to_datetime(new_df['timestamp'], unit='ms', utc=True)
        new_df.set_index('timestamp', inplace=True)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for col in ['open', 'high', 'low', 'close', 'volume']:
            new_df[col] = pd.to_numeric(new_df[col], errors='coerce')
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏
        df = pd.concat([df, new_df]).drop_duplicates().sort_index()
        df.to_csv(HISTORICAL_DATA_FILE)
        logger.info(f"üìÅ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except BinanceAPIException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance API –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {e}")
    return df

def get_crypto_data(df, symbol, timeframe):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ."""
    df = update_historical_data(df, symbol, timeframe)
    logger.info(f"üìà –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {len(df)}")
    return df

# ======================= –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ =======================

def get_market_trend(symbol):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ."""
    timeframe = '1h'  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ '1d' –¥–ª—è –µ—â—ë –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    global market_trends

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–¥
    last_update = market_trends.get(symbol, {}).get('last_update')
    if last_update:
        now = datetime.now(timezone.utc)
        time_since_update = now - last_update
        interval_hours = int(timeframe.replace('h', ''))
        if time_since_update < timedelta(hours=interval_hours):
            # –¢—Ä–µ–Ω–¥ –∞–∫—Ç—É–∞–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π
            return market_trends[symbol]['trend']

    df = load_historical_data(symbol, timeframe)
    df = get_crypto_data(df, symbol, timeframe)
    
    if df.empty or len(df) < 200:
        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.")
        return None  # –ù–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥

    sma50 = SMAIndicator(close=df['close'], window=50).sma_indicator()
    sma200 = SMAIndicator(close=df['close'], window=200).sma_indicator()

    if sma50.iloc[-1] > sma200.iloc[-1]:
        trend = 'uptrend'  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        logger.info(f"üìà –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: –í–æ—Å—Ö–æ–¥—è—â–∏–π.")
    elif sma50.iloc[-1] < sma200.iloc[-1]:
        trend = 'downtrend'  # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        logger.info(f"üìâ –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: –ù–∏—Å—Ö–æ–¥—è—â–∏–π.")
    else:
        trend = 'sideways'  # –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥
        logger.info(f"‚û°Ô∏è –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: –ë–æ–∫–æ–≤–æ–π.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    market_trends[symbol] = {
        'trend': trend,
        'last_update': datetime.now(timezone.utc)
    }
    return trend

# ======================= –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ =======================

def analyze_data(df, symbol, timeframe, trend):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    if df.empty:
        logger.info(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.")
        return None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    try:
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        sma5 = SMAIndicator(close=df['close'], window=5)
        sma10 = SMAIndicator(close=df['close'], window=10)
        df['SMA5'] = sma5.sma_indicator()
        df['SMA10'] = sma10.sma_indicator()

        # EMA –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        ema20 = EMAIndicator(close=df['close'], window=20)
        df['EMA20'] = ema20.ema_indicator()

        # –ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã (RSI)
        rsi = RSIIndicator(close=df['close'], window=14)
        df['RSI'] = rsi.rsi()

        # MACD
        macd = MACD(close=df['close'])
        df['MACD'] = macd.macd()
        df['MACD_signal'] = macd.macd_signal()

        # –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        bollinger = BollingerBands(close=df['close'], window=20, window_dev=2)
        df['Bollinger_High'] = bollinger.bollinger_hband()
        df['Bollinger_Low'] = bollinger.bollinger_lband()

        # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫
        stochastic = StochasticOscillator(
            high=df['high'], low=df['low'], close=df['close'], window=14, smooth_window=3)
        df['Stochastic'] = stochastic.stoch()

        # ADX
        adx = ADXIndicator(high=df['high'], low=df['low'], close=df['close'], window=14)
        df['ADX'] = adx.adx()

        # ATR (Average True Range) –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        atr = AverageTrueRange(high=df['high'], low=df['low'], close=df['close'], window=14)
        df['ATR'] = atr.average_true_range()

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–±—ä–µ–º–∞
        obv = OnBalanceVolumeIndicator(close=df['close'], volume=df['volume'])
        df['OBV'] = obv.on_balance_volume()

        mfi = MFIIndicator(high=df['high'], low=df['low'], close=df['close'], volume=df['volume'], window=14)
        df['MFI'] = mfi.money_flow_index()

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        df['Candlestick_Pattern'] = df.apply(detect_candlestick_pattern, axis=1)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {e}")
        return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if df.empty or len(df) < 2:
        logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.")
        return None

    try:
        latest = df.iloc[-1]
        previous = df.iloc[-2]
    except IndexError as e:
        logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: {e}")
        return None

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    logger.info(
        f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}: "
        f"SMA5={latest['SMA5']}, SMA10={latest['SMA10']}, RSI={latest['RSI']}, "
        f"MACD={latest['MACD']}, MACD_signal={latest['MACD_signal']}, "
        f"OBV={latest['OBV']}, MFI={latest['MFI']}, "
        f"Candlestick_Pattern={latest['Candlestick_Pattern']}"
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ADX –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
    if latest['ADX'] < 25:
        logger.info(f"‚ö†Ô∏è –¢—Ä–µ–Ω–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–ª—å–Ω—ã–º –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} (ADX < 25). –°–∏–≥–Ω–∞–ª—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è.")
        return None

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicator_names = {
        'SMA': '–°–∫–æ–ª—å–∑—è—â–∏–µ –°—Ä–µ–¥–Ω–∏–µ (SMA)',
        'RSI': '–ò–Ω–¥–µ–∫—Å –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –°–∏–ª—ã (RSI)',
        'MACD': 'MACD',
        'Bollinger': '–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞',
        'Stochastic': '–°—Ç–æ—Ö–∞—Å—Ç–∏–∫',
        'OBV': 'On-Balance Volume (OBV)',
        'MFI': '–ò–Ω–¥–µ–∫—Å –î–µ–Ω–µ–∂–Ω–æ–≥–æ –ü–æ—Ç–æ–∫–∞ (MFI)',
        'Candlestick': f"–°–≤–µ—á–Ω–æ–π –ü–∞—Ç—Ç–µ—Ä–Ω ({latest['Candlestick_Pattern']})"
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    buy_signals = []
    sell_signals = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–∏

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    if previous['SMA5'] < previous['SMA10'] and latest['SMA5'] >= latest['SMA10']:
        buy_signals.append(indicator_names['SMA'])
    elif previous['SMA5'] > previous['SMA10'] and latest['SMA5'] <= latest['SMA10']:
        sell_signals.append(indicator_names['SMA'])

    # RSI
    if latest['RSI'] < 30:
        buy_signals.append(indicator_names['RSI'])
    elif latest['RSI'] > 70:
        sell_signals.append(indicator_names['RSI'])

    # MACD
    if previous['MACD'] < previous['MACD_signal'] and latest['MACD'] >= latest['MACD_signal']:
        buy_signals.append(indicator_names['MACD'])
    elif previous['MACD'] > previous['MACD_signal'] and latest['MACD'] <= latest['MACD_signal']:
        sell_signals.append(indicator_names['MACD'])

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    if latest['close'] > latest['Bollinger_High']:
        buy_signals.append(indicator_names['Bollinger'])
    elif latest['close'] < latest['Bollinger_Low']:
        sell_signals.append(indicator_names['Bollinger'])

    # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫
    if latest['Stochastic'] < 20:
        buy_signals.append(indicator_names['Stochastic'])
    elif latest['Stochastic'] > 80:
        sell_signals.append(indicator_names['Stochastic'])

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–±—ä–µ–º–∞
    if latest['OBV'] > previous['OBV']:
        buy_signals.append(indicator_names['OBV'])
    elif latest['OBV'] < previous['OBV']:
        sell_signals.append(indicator_names['OBV'])

    if latest['MFI'] < 20:
        buy_signals.append(indicator_names['MFI'])
    elif latest['MFI'] > 80:
        sell_signals.append(indicator_names['MFI'])

    # –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if latest['Candlestick_Pattern'] in ['Bullish Engulfing', 'Hammer', 'Doji']:
        buy_signals.append(indicator_names['Candlestick'])
    elif latest['Candlestick_Pattern'] in ['Bearish Engulfing', 'Shooting Star', 'Doji']:
        sell_signals.append(indicator_names['Candlestick'])

    # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    buy_signals_count = len(buy_signals)
    sell_signals_count = len(sell_signals)

    # –ü–æ—Ä–æ–≥ –¥–ª—è –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ (–º–∏–Ω–∏–º—É–º 3 –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
    threshold = 3

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    if trend == 'uptrend':
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –õ–û–ù–ì —Å–∏–≥–Ω–∞–ª—ã
        if buy_signals_count >= threshold:
            signal = (
                f"üìà **–õ–û–ù–ì —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}!** {buy_signals_count} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω—ã.\n"
                f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(buy_signals)}"
            )
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –õ–û–ù–ì —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏: {', '.join(buy_signals)}")
            return signal
        else:
            logger.info(f"üîï –õ–û–ù–ì —Å–∏–≥–Ω–∞–ª –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.")
            return None
    elif trend == 'downtrend':
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –®–û–†–¢ —Å–∏–≥–Ω–∞–ª—ã
        if sell_signals_count >= threshold:
            signal = (
                f"üìâ **–®–û–†–¢ —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}!** {sell_signals_count} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω—ã.\n"
                f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(sell_signals)}"
            )
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –®–û–†–¢ —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏: {', '.join(sell_signals)}")
            return signal
        else:
            logger.info(f"üîï –®–û–†–¢ —Å–∏–≥–Ω–∞–ª –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.")
            return None
    else:
        # –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥, –º–æ–∂–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–∞ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info(f"‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥ –¥–ª—è {symbol}. –°–∏–≥–Ω–∞–ª—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è.")
        return None

# ======================= –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ =======================

def detect_candlestick_pattern(row):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –ø—Ä–æ—Å—Ç—ã–µ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."""
    open_price = row['open']
    high_price = row['high']
    low_price = row['low']
    close_price = row['close']

    body = abs(close_price - open_price)
    upper_shadow = high_price - max(close_price, open_price)
    lower_shadow = min(close_price, open_price) - low_price

    if body < (upper_shadow + lower_shadow) * 0.1:
        return 'Doji'
    elif body > (upper_shadow + lower_shadow) * 2 and close_price > open_price:
        return 'Bullish Engulfing'
    elif body > (upper_shadow + lower_shadow) * 2 and close_price < open_price:
        return 'Bearish Engulfing'
    elif lower_shadow > body * 2 and close_price > open_price:
        return 'Hammer'
    elif upper_shadow > body * 2 and close_price < open_price:
        return 'Shooting Star'
    else:
        return 'No Pattern'

# ======================= –ö–æ–º–∞–Ω–¥—ã –ë–æ—Ç–∞ =======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã."""
    chat_id = update.effective_chat.id
    subscribers = load_subscribers()
    if chat_id not in subscribers:
        subscribers.add(chat_id)
        save_subscribers(subscribers)
        await update.message.reply_text('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã.")
    else:
        await update.message.reply_text('‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤."""
    chat_id = update.effective_chat.id
    subscribers = load_subscribers()
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        save_subscribers(subscribers)
        await update.message.reply_text('üõë –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
    else:
        await update.message.reply_text('‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã.')
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–æ –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."""
    help_text = (
        "‚ÑπÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        "/start - **–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è** –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/stop - **–û—Ç–ø–∏—Å–∞—Ç—å—Å—è** –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "/help - **–ü–æ–ª—É—á–∏—Ç—å** —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É.")

# ======================= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—à–∏–±–æ–∫ =======================

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(msg="‚ùå Exception while handling an update:", exc_info=context.error)

# ======================= –§—É–Ω–∫—Ü–∏—è –¥–ª—è –û—Ç–ø—Ä–∞–≤–∫–∏ –°–∏–≥–Ω–∞–ª–æ–≤ =======================

async def send_signal(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."""
    subscribers = load_subscribers()
    if not subscribers:
        logger.info("üîï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.")
        return  # –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

    tasks = []
    for symbol in CRYPTO_SYMBOLS:
        trend = get_market_trend(symbol)
        if trend is None:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –¥–ª—è {symbol}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        for timeframe in TIMEFRAMES:
            tasks.append(process_symbol(context, symbol, timeframe, subscribers, trend))
    await asyncio.gather(*tasks)

async def process_symbol(context: ContextTypes.DEFAULT_TYPE, symbol: str, timeframe: str, subscribers: set, trend: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ."""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    df = load_historical_data(symbol, timeframe)
    if df.empty:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}. –°–∏–≥–Ω–∞–ª—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    df = get_crypto_data(df, symbol, timeframe)
    if df.empty:
        logger.error(f"‚ùå DataFrame –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}. –°–∏–≥–Ω–∞–ª—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
    signal = analyze_data(df, symbol, timeframe, trend)

    if signal:
        for chat_id in subscribers:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üîî **–°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}:**\n{signal}",
                    parse_mode='Markdown'
                )
                logger.info(f"üì© –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
    else:
        logger.info(f"üîï –°–∏–≥–Ω–∞–ª –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.")

# ======================= –û—Å–Ω–æ–≤–Ω–∞—è –§—É–Ω–∫—Ü–∏—è =======================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = ApplicationBuilder().token(API_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("help", help_command))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue = application.job_queue
    job_queue.run_repeating(send_signal, interval=60, first=10)  # –ü–µ—Ä–∏–æ–¥: 60 —Å–µ–∫—É–Ω–¥, –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

# ======================= –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ =======================

if __name__ == '__main__':
    main()